#!/usr/bin/env node

var fs = require('fs')
var chalk = require('chalk')
var bitcoin = require('bitcoinjs-lib')
var bip39 = require('bip39')
var argv = require('minimist')(process.argv.slice(2))

var networks = bitcoin.networks
var networkName = argv.t ? 'testnet' : 'bitcoin'

if (argv.h) {
  console.log('Usage: seed [wallet name] [wallet name] ...')
  process.exit(0)
}

console.log()
console.log('Generating keys for network: %s\n', chalk.bold(networkName))
var network = networks[networkName]

var wallets = argv._

if (wallets.length === 0) wallets = ['main']

var mnemonic = bip39.generateMnemonic()
fs.writeFileSync('/tmp/mnemonic', mnemonic)
console.log(mnemonic)

var seed = bip39.mnemonicToSeed(mnemonic)
var hdNode = bitcoin.HDNode.fromSeedBuffer(seed, network)

console.log(hdNode.toString())   // DEBUG -- we shouldn't really print out private seeds, this is for testing signing

function walletRec (wallet, k) {
  return {wallet: wallet, pubkey: hdNode.deriveHardened(k).neutered().toString()}
}

var walletRec = wallets.map(walletRec)
fs.writeFileSync('/tmp/wallets.json', JSON.stringify(walletRec))
console.log()
console.log('Your wallets have been saved to disk.')
console.log('Use %s to display QR code for copying public key.', chalk.bold('qr <wallet name>'))
