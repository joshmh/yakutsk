#!/usr/bin/env node

var R = require('ramda')
var colors = require('colors')
var bitcoin = require('bitcoinjs-lib')
var bip39 = require('bip39')
var argv = require('minimist')(process.argv.slice(2))

var networks = bitcoin.networks
var networkName = argv.t ? 'testnet' : 'bitcoin'
console.log('Generating keys for network: %s\n', colors.bold(networkName))
var network = networks[networkName]

var accounts = argv._
if (accounts.length === 0) accounts = ['main']

function pubkeyForAccount (account, k) {
  var mnemonic = bip39.generateMnemonic()
  if (k > 0) {
    console.log(colors.gray('--------------------------------'))
  }
  console.log('Account: %s', colors.bold(account))
  console.log(mnemonic)
  var seed = bip39.mnemonicToSeed(mnemonic)
  var hdNode = bitcoin.HDNode.fromSeedBuffer(seed, network)
  console.log(hdNode.toString())
  var publicNode = hdNode.deriveHardened(k).neutered()
  console.log(colors.green('\nMaster public key:\n') + publicNode.toString())
}

console.log('Master public keys for your accounts:')
console.log()
R.forEachIndexed(pubkeyForAccount, accounts)
