#!/usr/bin/env node

var fs = require('fs')
var R = require('ramda')
var colors = require('colors')
var bitcoin = require('bitcoinjs-lib')
var bip39 = require('bip39')
var argv = require('minimist')(process.argv.slice(2))

var networks = bitcoin.networks
var networkName = argv.t ? 'testnet' : 'bitcoin'
console.log('Generating keys for network: %s\n', colors.bold(networkName))
var network = networks[networkName]

var wallets = argv._
var dupeFactor = argv.d ? parseInt(argv.d, 10) : 1

if (wallets.length === 0) wallets = ['main']

/*

TODO:

- use dotfile for settings
- another script for duolingo style gamification of brainwallet

*/

var mnemonic = bip39.generateMnemonic()
console.log(mnemonic)

var seed = bip39.mnemonicToSeed(mnemonic)
var hdNode = bitcoin.HDNode.fromSeedBuffer(seed, network)

console.log(hdNode.toString())   // DEBUG -- we shouldn't really print out private seeds, this is for testing signing

function pubkeysForDupeIndex (walletK, dupeK) {
  return hdNode.deriveHardened(dupeK).deriveHardened(walletK).neutered()
}

function pubkeysForWallet (wallet, k) {
  var pubkeysForThisWallet = R.partial(pubkeysForDupeIndex, k)
  var pubkeys = R.times(pubkeysForThisWallet, dupeFactor)
  save(wallet, R.map(R.func('toString'), pubkeys))
}

function save (name, data) {
  var path = name + '.json'
  fs.writeFileSync(path, JSON.stringify(data))
}

console.log()
R.forEachIndexed(pubkeysForWallet, wallets)
console.log('Your wallets have been saved to disk.')
